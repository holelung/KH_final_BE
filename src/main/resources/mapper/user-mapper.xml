<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kh.saintra.user.model.dao.UserMapper">

    <insert id="join"
            parameterType="User">
        <![CDATA[
        INSERT INTO TB_USER (
            USERNAME,
            REALNAME,
            PASSWORD,
            EMAIL,
            ADDRESS_1,
            ADDRESS_2,
            PHONE,
            SSN
        )
        VALUES (
            #{username},
            #{realname},
            #{password},
            #{email},
            #{address1},
            C##SAINTRA.CRYPTO.ENCRYPT_AES(#{address2, jdbcType=VARCHAR}),
            C##SAINTRA.CRYPTO.ENCRYPT_AES(#{phone, jdbcType=VARCHAR}),
            C##SAINTRA.CRYPTO.ENCRYPT_AES(#{ssn, jdbcType=VARCHAR})
        )
        ]]>
    </insert>

    <sql id="selectUser">
        SELECT
            ID,
            USERNAME,
            PASSWORD,
            REALNAME,
            EMAIL,
            PHONE,
            ENROLL_DATE enrollDate,
            ROLE,
            SSN,
            ADDRESS_1 address1,
            ADDRESS_2 address2,
            JOB_ID jobId,
            DEPT_ID deptId,
            TEAM_ID teamId,
            IS_ACTIVE isActive
        FROM
            TB_USER
    </sql>

    <select id="getUserByUsername"
            parameterType="string"
            resultType="UserDTO">
        <include refid="selectUser" />
        WHERE
            USERNAME = #{username}
        AND
            IS_ACTIVE = 'Y'
    </select>

    <select id="getUserByUserId"
            parameterType="_long"
            resultType="UserDTO">
        <include refid="selectUser" />
        WHERE
            ID = #{id}
    </select>

    <select id="getUserByUsernameForApprove"
            parameterType="string"
            resultType="UserDTO">
        SELECT
            ID,
            USERNAME,
            PASSWORD,
            REALNAME,
            EMAIL,
            PHONE,
            ENROLL_DATE enrollDate,
            ROLE,
            SSN,
            ADDRESS_1 address1,
            ADDRESS_2 address2,
            JOB_ID jobId,
            DEPT_ID deptId,
            TEAM_ID teamId,
            IS_ACTIVE isActive
        FROM
            TB_USER
        WHERE
            USERNAME = #{username}
        AND
            IS_ACTIVE = 'N'
    </select>

    <!-- 회원 목록 불러오기 -->
    <select id="getUserList"
            parameterType="UserSearchDTO"
            resultType="UserDTO">
        <include refid="selectUser" />
        WHERE 
            1=1
        <if test="search != null">
        AND
            REALNAME = #{search}
        </if>
        <if test="deptId != null">
        AND
            DEPT_ID = #{deptId}
        </if>
        <if test="jobId != null">
        AND
            JOB_ID = #{jobId}
        </if>
        ORDER BY
            ID DESC
    </select>

    <!-- 회원 개인정보 업뎉이트 -->
    <update id="updateUser"
            parameterType="UserProfileDTO">
        UPDATE
            TB_USER
        SET
            REALNAME = #{realname},
            PHONE = #{phone},
            ADDRESS_1 = #{address1},
            ADDRESS_2 = #{address2}
        WHERE
            ID = #{id}
    </update>

    <!-- 이메일 업데이트 -->
    <update id="updateEmail"
            parameterType="UpdateEmail">
        UPDATE
            TB_USER
        SET
            EMAIL = #{email}
        WHERE
            ID = #{id}
    </update>


    <!-- 비밀번호 변경(로그인) -->
    <update id="updatePassword"
            parameterType="UpdatePassword">
        UPDATE
            TB_USER
        SET
            PASSWORD = #{password}
        WHERE
            ID = #{id}
    </update>

    <!-- 회원탈퇴 (본인) -->
    <update id="deleteUser"
            parameterType="_long">
        UPDATE
            TB_USER
        SET
            IS_ACTIVE = 'N'
        WHERE
            ID = #{id}
    </update>

    <select id="getAttendance"
            parameterType="AttendanceRequest"
            resultType="Attendance">
        SELECT
            ID,
            USER_ID userId,
            TYPE,
            TIME
        FROM
            TB_ATTENDANCE
        WHERE
            USER_ID = #{userId}
        AND
            TIME &gt; #{startDate}
        AND
            TIME &lt; #{endDate}
        ORDER BY
            TIME DESC
    </select>

    <!-- 가장 최근 출퇴근 기록 확인 -->
    <select id="checkLatestAttendance"
            parameterType="_long"
            resultType="Attendance">
        SELECT
            TYPE,
            TIME
        FROM
            TB_ATTENDANCE
        WHERE
            USER_ID = #{id}
        ORDER BY
            TIME DESC
        FETCH FIRST 1 ROW ONLY
    </select>
<!-- SELECT 중에 INSERT못하게 락을 걸어야한다.. -->

    <!-- 출근 -->
    <insert id="checkIn"
            parameterType="_long">
        INSERT
        INTO
            TB_ATTENDANCE(
                USER_ID,
                TYPE,
                TIME
            )
        VALUES(
            #{id},
            'Attendance',
            SYSDATE
        )
    </insert>

    <!-- 퇴근 -->
    <insert id="checkOut"
            parameterType="_long">
        INSERT
        INTO
            TB_ATTENDANCE(
                USER_ID,
                TYPE,
                TIME
            )
        VALUES(
            #{id},
            'Leave',
            SYSDATE
        )
    </insert>
</mapper>